package app;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

parser code {:
	public static String  robotProgram;
	public static String  globalAssignments;
	public static boolean bDebugFlag;
	public static Yylex   scanner;

	/* stores a basic symbol table */
	public static RobotScopeManager sm;
	
	public static String temp;

        public static void main(String args[]) throws Exception {
           bDebugFlag = true;
              
              robotProgram = "import app.*;\nimport java.util.*;\n";
              globalAssignments = "";
              sm = new RobotScopeManager();

              scanner = new Yylex(new BufferedReader(new FileReader(args[0])));

              /* create a parsing object */
              parser parser_obj = new parser(scanner);

              /* open input files, etc. here */
              Symbol parse_tree = null;

              try {
                    
                    parse_tree = parser_obj.debug_parse();
                    //parse_tree = parser_obj.parse();

              } catch (Exception e) {
                    /* do cleanup here - - possibly rethrow e */
                    e.printStackTrace();
              } finally {
                    /* do close out here */
              }
              
              // dump generated java code to file
              BufferedWriter bwTranslatedCode = new BufferedWriter(new FileWriter(args[1], false));
              robotProgram.replaceAll("\n", System.getProperty("line.separator"));
              bwTranslatedCode.write(robotProgram);
              bwTranslatedCode.close();

              //System.out.println("Translated Java code:\n" + robotProgram);
              System.exit(0);

        }
        
        public void syntax_error(java_cup.runtime.Symbol current) {
    		System.err.println("*** Syntax error ***");
    		System.err.println("Line#: " + (scanner.getLineNumber() + 1));
    		System.err.println("Column#: " + scanner.getColumnNumber() + 1);
    		System.err.println("Near token: " + scanner.lastToken());
    		System.err.println("Terminal/Non-terminal #: " + current + "\n");
    		System.exit(1);
  		}
  		
  		public void custom_error(String errMsg) {
            System.err.println("*** Syntax error ***\n" + errMsg);
            System.err.println("Line#: " + (scanner.getLineNumber() + 1));
    		System.err.println("Column#: " + scanner.getColumnNumber());
    		System.exit(2);
  		}
:}
/* Terminals (tokens returned by the scanner) */
terminal         PLUS, MINUS, TIMES, DIVIDE, LPAREN, RPAREN;
terminal         THINK, END, SAY, NEWLINE, EQUALS, IS, INSTRUCTION, WITH;
terminal         GIVES, MEANS, TRUE, FALSE, OR, AND, NOT;
terminal         MIN_HASH, MAX_HASH, NOTHING_NOT, NOWHERE_AT, OF, SELF;
terminal         IF, THEN, ELSE, DONE;
terminal         REPEAT, IN, EACH;
terminal         ROLLOVER;
terminal         NOTHING_RES;
terminal Integer NUMBER;
terminal String  NUMBER_EXPRESSION;
terminal String  NUMBER_PERCENTAGE;
terminal String  INT_IDX;
terminal         IS_LOWER_THAN, IS_STRICTLY_LOWER_THAN, IS_DIFFERENT_FROM;
terminal         IS_STRICTLY_GREATER_THAN, IS_GREATER_THAN, IS_EQUAL_TO;
terminal String  NUMBER_NAME_IDX;
terminal String  FUNCTION_NAME;
terminal RobotVar VARIABLE;
terminal         TIMES_REPEAT, WHILE;
terminal String  VERBATIM_OUT_TXT;
terminal         SAY_EXPR_STA, SAY_EXPR_END;
terminal         SORT, ADD, REMOVE, CHANGE, ITEM_AT, UMINUS;

/* Non-terminals */
non terminal Integer expr;
non terminal String  statement, entry, variable_name, program, block;
non terminal         optnl, assign_op;
non terminal String  function, functions, variable_name_local;
non terminal String  boolean_final, declaration;
non terminal String  constant_value;
non terminal String  call, local_declaration;
//non terminal String  field_name;
non terminal String  conditional, else_statement;
non terminal String  arguments, arguments_act, function_call;
non terminal String  comparison_operator, index;
non terminal String  assignment;
non terminal String  loop;
non terminal Expression arithmetic_expression, boolean_expression, field_access;
non terminal String  out_text;
non terminal String  sort_type, optional_sort_arg, sort_function;
non terminal String  special_args;

/* Precedences: Follow Java conventions */

precedence left  OR;
precedence left  AND;

precedence left IS_DIFFERENT_FROM, IS_EQUAL_TO;

/* Do not split this line */
precedence nonassoc IS_STRICTLY_GREATER_THAN, IS_GREATER_THAN, IS_LOWER_THAN, IS_STRICTLY_LOWER_THAN;

precedence left PLUS, MINUS, ROLLOVER;
precedence left TIMES, DIVIDE;
precedence left UMINUS;

precedence right OF;

precedence right NOT;

precedence left LPAREN, RPAREN;


/* The Grammar */
program         ::= optnl declaration:dcls
                    optnl entry:ent
                    optnl functions:funcs
                    optnl
                    {:
                       RESULT =  "\npublic class RobotCompiled extends Robot {\n\n";
                       RESULT += dcls + ent + funcs;

                       if(parser.globalAssignments.compareTo("") != 0) {
                          //Constructor, if you please
                       	  RESULT += "\n\n\tpublic RobotCompiled() {\n";
                       	  RESULT += parser.globalAssignments + "\t}\n";
                       }
                       RESULT += "\n}\n";

                       parser.robotProgram += RESULT;
                    :}
;

declaration     ::= declaration:dcl optnl VARIABLE:v NEWLINE
                    {:
                       parser.temp = parser.sm.initializeIfNecessary(v);
                       
                       if(!parser.temp.equals("")) {
                          RESULT = dcl + parser.sm.indent() + v.javaType() + " " + v.name() + ";\n";
                          if(v.isList()) {
                             parser.globalAssignments += "\t\t" + parser.temp;
                          }
                       }
                       
                       /*else {
                         // It is an error to declare the same name twice in global scope
                         System.err.println("Duplicate declaration: " + v.name() + "\n");
                         System.exit(0);
                       }*/
                    :}
                 |
                    declaration:dcl optnl VARIABLE:v assign_op boolean_expression:ex NEWLINE
                    {:
                       parser.temp = parser.sm.declareIfNecessary(v);
                       String t = parser.temp + v.name() + " = " + ex.javaCode.toString() + ";\n";
                       
                       if(parser.temp.compareTo("") != 0) {
                          RESULT = dcl + parser.sm.indent() + parser.temp + v.name() + ";\n";
                          parser.globalAssignments += "\t\tthis." + v.name() + " = " + ex.javaCode.toString() + ";\n";
                       } else {
                          RESULT = dcl;
                          parser.globalAssignments += "\t\tthis." + t;
                       }
                    :}
                 |
                    declaration:dcl optnl field_access:fa assign_op boolean_expression:ex NEWLINE
                    {:
                       //System.out.println("DEBUG:"+fa.declarations.toString());
                       String [] temp = fa.declarations.toString().split("\\n");
                       String declarations = new String();
                       String initializations = new String();
                       //System.out.println("DEBUG:"+temp.length);
                       for (int i = 0 ; i < temp.length ; i++) {
                          //System.out.println("DEBUG:temp["+ i +"].length()="+temp[i].length());
                          if (temp[i].length() <= 1) continue;
                          //System.out.println("DEBUG: temp[" + i + "]=" + temp[i].toString());
                          int firstSpaceIndex = temp[i].indexOf(" ");
                          int secondSpaceIndex = temp[i].indexOf(" ",firstSpaceIndex + 1);
                          //System.out.println("DEBUG:firstSpaceIndex=" + firstSpaceIndex + " secondSpaceIndex=" + secondSpaceIndex);
                          if (firstSpaceIndex < 0 || secondSpaceIndex < 0) continue; 
                          declarations += "\t\t" + declarations + temp[i].substring(0,secondSpaceIndex) + ";\n";
                          initializations += "\t\t" + initializations + temp[i].substring(firstSpaceIndex + 1) + "\n";
                       }
                       
                       System.out.println("DEBUG: declarations="+declarations);
                       System.out.println("DEBUG: initializations="+initializations);

                       RESULT = dcl + declarations;
                       parser.globalAssignments += initializations;
                       parser.globalAssignments += "\t\tthis." + fa.javaCode.toString() + " = " + ex.javaCode.toString() + ";\n";
                    :}
                 |
                    /* empty */
                    {:
                       RESULT = "";
                    :}
;

//TODO: What happens if base_value is not already declared?  Should we create a new instance?
field_access    ::= VARIABLE:v OF arithmetic_expression:ae
                    {:
                       RESULT = new Expression(ae.javaCode.toString() + "." + v.name());
                       RESULT.declarations.append(ae.declarations);
                    :}
                |   
                    function_call:fc OF arithmetic_expression:ae
                    {:
                       RESULT = new Expression(ae.javaCode.toString() + "." + fc);
                       RESULT.declarations.append(ae.declarations);
                    :}
                |
                    sort_function:sf OF arithmetic_expression:ae
                    {:
                       RESULT = new Expression(ae.javaCode.toString() + "." + sf);
                       RESULT.declarations.append(ae.declarations);
                    :}
                |   
                    index:idx OF arithmetic_expression:ae
                    {:
                       RESULT = new Expression(ae.javaCode.toString() + ".get(" + idx + ")");
                       RESULT.declarations.append(ae.declarations);
                    :}
                /*|   
                    variable_name:vn
                    {:
                       RESULT = vn;
                    :} 
                |   
                    SELF
                    {:
                       RESULT = "this";
                    :}*/
;

index           ::=  NUMBER_NAME_IDX:nnidx
                     {: RESULT = nnidx.substring(0, nnidx.length()-3);:}
                |
                     INT_IDX:nidx
                     {: RESULT = nidx.substring(0, nidx.length()-2) + "f";  :}
;
/*
field_name      ::=  VARIABLE:v
                     {:
                       RESULT = v.name();
                     :}
                |
                     function_call:fc
                     {:
                        RESULT = fc;
                     :}
;
*/
// TODO: We don't need to call isDeclared, it's already being called in declare variable
// See local_variable to see shorter usage
// Also, I was thinking that we can add a Java Enum to enumerate our types and enter
// associated information like the corresponding Java type, postfix, etc.  Would be much
// cleaner than typing those things every time, I think
variable_name   ::= VARIABLE:v
                    {:
                       RESULT = parser.sm.declareIfNecessary(v) + v.name(); 
                    :}
;

functions       ::=   function:fn optnl
                      functions:fns          {: RESULT = fn + fns; :}
                |
                      /* empty */            {: RESULT = ""; :}
;

function        ::=   INSTRUCTION FUNCTION_NAME:fn {: parser.sm.increaseLevel(); :}
                      WITH arguments:arg MEANS NEWLINE optnl
                      block:b optnl
                      GIVES VARIABLE:v NEWLINE
                      {:
                         // remove the final ,<space> : (arg1, arg2, ,<space>)
                         arg = arg.trim();
                         if (arg.endsWith(",")) {
                         	arg = arg.substring(0, arg.length() - 1);
                         }
                         RESULT = "\n\tpublic " + v.javaType() + " " + fn + "(" + arg + ") {\n";
                         RESULT += "\n" + b;
                         if (v.type() != RobotType.NOTHING) {
                            RESULT += parser.sm.indent() + "return " + v.name() + ";\n";
                         }
                         RESULT += "\t}";
                         parser.sm.decreaseLevel();
                      :}
;

//TODO: Arguments probably should use their own production rather than variable_name_local
//      variable_name_local gets declareIfNecessary, but arguments should ALWAYS have a declaration in front of them
arguments        ::=   variable_name_local:arg arguments:args 
                       {:
                          RESULT = arg + ", " + args;
                       :}
                |
                       /* empty */
                       {:
                          RESULT = "";
                       :}                      
;

variable_name_local  ::=  VARIABLE:v
                          {:
                             RESULT = parser.sm.declareIfNecessary(v) + v.name();
                          :}
;
/*
base_value      ::=   field_name:fn            {:   RESULT = fn;     :}
                |
                      constant_value:cv        {:   RESULT = cv;     :}
                |
                      function_call:fc         {:   RESULT = fc;     :}
                |
                      field_access:fa          {:   RESULT = fa;     :}
                |
                      SELF                     {:   RESULT = "this"; :}
                |
                      arithmetic_expression:ae {:   RESULT = ae;     :}
;
*/

arithmetic_expression   ::=   arithmetic_expression:ae1 ROLLOVER arithmetic_expression:ae2
                              {:
                                 RESULT = new Expression();
                                 // Call the appropriate Java function
                                 RESULT.declarations.append(ae1.declarations);
                                 RESULT.declarations.append(ae2.declarations);
                                 
                                 RESULT.javaCode.append("funcset.rollover(").append(ae1.javaCode).append(", ").append(ae2.javaCode).append(")");
                              :}
                        |
                              arithmetic_expression:ae1 TIMES arithmetic_expression:ae2
                              {:
                                 RESULT = new Expression();
                                 // Call the appropriate Java function
                                 RESULT.declarations.append(ae1.declarations);
                                 RESULT.declarations.append(ae2.declarations);

                                 RESULT.javaCode.append("funcset.times(").append(ae1.javaCode).append(", ").append(ae2.javaCode).append(")");
                              :}
                        |
                              arithmetic_expression:ae1 PLUS arithmetic_expression:ae2
                              {:
                                 RESULT = new Expression();
                                 // Call the appropriate Java function
                                 RESULT.declarations.append(ae1.declarations);
                                 RESULT.declarations.append(ae2.declarations);

                                 RESULT.javaCode.append("funcset.add(").append(ae1.javaCode).append(", ").append(ae2.javaCode).append(")");
                              :}
                        |
                              arithmetic_expression:ae1 MINUS arithmetic_expression:ae2
                              {:
                                 RESULT = new Expression();
                                 // Call the appropriate Java function
                                 RESULT.declarations.append(ae1.declarations);
                                 RESULT.declarations.append(ae2.declarations);

                                 RESULT.javaCode.append("funcset.subtract(").append(ae1.javaCode).append(", ").append(ae2.javaCode).append(")");
                              :}
                        |
                              arithmetic_expression:ae1 DIVIDE arithmetic_expression:ae2
                              {:
                                 RESULT = new Expression();
                                 // Call the appropriate Java function
                                 RESULT.declarations.append(ae1.declarations);
                                 RESULT.declarations.append(ae2.declarations);

                                 RESULT.javaCode.append("funcset.divided(").append(ae1.javaCode).append(", ").append(ae2.javaCode).append(")");
                              :}
                        |
                              LPAREN arithmetic_expression:ae RPAREN
                              {:
                                 RESULT = new Expression();
                                 RESULT.declarations = ae.declarations;
                                 RESULT.javaCode.append("( ").append(ae.javaCode).append(" )");
                              :}
                        |
                              NUMBER_EXPRESSION:ne
                              {:
                                 RESULT = new Expression("new Float(" + ne + ")");
                              :}
                        |
                              MINUS NUMBER_EXPRESSION:ne
                              {:
                                 RESULT = new Expression("new Float(-" + ne + ")");
                              :}
                              %prec UMINUS
                        |
                              NUMBER_PERCENTAGE:pe
                              {:
                                 RESULT = new Expression("new Percentage(" + pe.substring(0, pe.length() - 1) + ")");
                              :}
                        |     
                              VARIABLE:v
                              {:
                                 RESULT = new Expression(v.name());
                                 
                                 parser.temp = parser.sm.initializeIfNecessary(v);
                                 RESULT.declarations.append(parser.temp);
                              :}
                        |
                              function_call:fc
                              {:
                                 RESULT = new Expression(fc);
                              :}
                        |
                              sort_function:sf
                              {:
                                 RESULT = new Expression(sf);
                              :}
                        |
                              constant_value:cv        {:   RESULT = new Expression(cv);     :}
                        |
                              field_access:fa          {:   RESULT = new Expression(fa);     :}
                        |
                              SELF                     {:   RESULT = new Expression("this"); :}
;

boolean_expression      ::=   boolean_expression:be1 OR boolean_expression:be2
                              {:   
                                 RESULT = new Expression(be1.javaCode.toString() + " || " + be2.javaCode.toString());
                                 RESULT.declarations.append(be1.declarations);
                                 RESULT.declarations.append(be2.declarations);
                              :}
                        |     
                              boolean_expression:be1 AND boolean_expression:be2
                              {:   
                                 RESULT = new Expression(be1.javaCode.toString() + " && " + be2.javaCode.toString());
                                 RESULT.declarations.append(be1.declarations);
                                 RESULT.declarations.append(be2.declarations);
                              :}
                        |     
                              NOT boolean_expression:be
                              {:   
                                 RESULT = new Expression("!" + be.javaCode.toString());
                                 RESULT.declarations.append(be.declarations);
                              :}
                        |     
                              LPAREN boolean_expression:be RPAREN
                              {:   
                                 RESULT = new Expression("(" + be.javaCode.toString() + ")");
                                 RESULT.declarations.append(be.declarations);
                              :}
                        |     
                              boolean_final:bf
                              {:   RESULT = new Expression(bf);  :}
                        |
                              arithmetic_expression:ae
                              {:  RESULT = new Expression(ae);  :}
                        |
                              boolean_expression:be1 IS_EQUAL_TO
                              boolean_expression:be2
                              {:   
                                 RESULT = new Expression(be1.javaCode.toString() + ".equals(" + be2.javaCode.toString() + ")");
                                 RESULT.declarations.append(be1.declarations);
                                 RESULT.declarations.append(be2.declarations);
                              :}
                        |
                              boolean_expression:be1 IS_DIFFERENT_FROM
                              boolean_expression:be2
                              {:   
                                 RESULT = new Expression("!" + be1.javaCode.toString() + ".equals(" + be2.javaCode.toString() + ")");
                                 RESULT.declarations.append(be1.declarations);
                                 RESULT.declarations.append(be2.declarations);
                              :}
                        |
                              boolean_expression:be1 comparison_operator:co
                              boolean_expression:be2
                              {:   
                                 RESULT = new Expression(be1.javaCode.toString() + co + be2.javaCode.toString());
                                 RESULT.declarations.append(be1.declarations);
                                 RESULT.declarations.append(be2.declarations);
                              :}
;

comparison_operator     ::=   IS_LOWER_THAN
                              {: RESULT = "<="; :}
                        |     
                              IS_STRICTLY_LOWER_THAN
                              {: RESULT = "<"; :}
                        |     
                              IS_STRICTLY_GREATER_THAN
                              {: RESULT = ">"; :}
                        |
                              IS_GREATER_THAN
                              {: RESULT = ">="; :}
;

boolean_final           ::=   TRUE  {:   RESULT = "true";   :}
                        |     FALSE {:   RESULT = "false";  :}
;

assign_op               ::=   EQUALS
                        |     IS
;

entry                   ::=   THINK {: parser.sm.increaseLevel(); :} NEWLINE
                              optnl
                              block:b
                              optnl
                              END
                              {:
                                 RESULT =  "\n";
                                 RESULT += "\tpublic void think() {\n";
                                 RESULT += "\n";
                                 RESULT += b;
                                 RESULT += "\n";
                                 RESULT += "\t}\n";
                                 RESULT += "\n";
                                 parser.sm.decreaseLevel();
                              :}
;

constant_value          ::=   MAX_HASH      {: RESULT = "Float.MAX_VALUE";  :}
                        |     MIN_HASH		{: RESULT = "Float.MIN_VALUE";  :}
                        |     NOTHING_NOT	{: RESULT = "new Enemy()";      :}
                        |     NOWHERE_AT	{: RESULT = "new Location()";   :}
                        |     NOTHING_RES   {: RESULT = "new Resource()";   :}
;

optnl                   ::=   optnl NEWLINE
                        |
                              /* empty */
;

statement               ::=   call:cl                {: RESULT = cl   + ";"; :}
                        |     local_declaration:ldcl {: RESULT = ldcl + ";"; :}
                        |     conditional:cond       {: RESULT = cond;       :}
                        |     assignment:ass         {: RESULT = ass  + ";"; :}
                        |     loop:l                 {: RESULT = l;          :}
;

block                   ::=   statement:s {: RESULT = parser.sm.indent() + s + "\n"; :}
                              optnl
                              block:b     {: RESULT += b; :}
                        |
                              /* empty */
                              {: RESULT = ""; :}
;


assignment              ::=   /*variable_name_local:vnl*/ VARIABLE:v assign_op boolean_expression:ex NEWLINE
                              {:
                                 //RESULT = vnl + " = " + ex;
                                 RESULT = parser.sm.declareIfNecessary(v) + v.name();
                              	 RESULT += " = " + ex.javaCode.toString();
                              :}
                        |
                              field_access:fa assign_op boolean_expression:ex NEWLINE
                              {: 
                                 RESULT = fa.declarations.toString() + ex.declarations.toString();
                                 RESULT += fa.javaCode.toString() + " = " + ex.javaCode.toString();
                              :}
;

conditional             ::=   IF boolean_expression:be THEN 
                              {:
                                 RESULT = "\n" + parser.sm.indent() + "if (" + be.javaCode.toString() + ") {\n";
                                 parser.sm.increaseLevel();
                              :} NEWLINE
                              optnl
                              block:b
                              optnl
                              else_statement:es
                              optnl 
                              DONE NEWLINE
                              {:
                                 parser.sm.decreaseLevel();
                                 RESULT += b;
                                 RESULT += es;
                                 RESULT += parser.sm.indent() + "}\n"; 
                              :}
;

else_statement          ::=   ELSE
                              {:
                                 parser.sm.decreaseLevel();
                                 RESULT =  parser.sm.indent() + "} else {\n";
                                 parser.sm.increaseLevel();
                              :}
                              NEWLINE
                              optnl
                              block:b
                              {:
                                 RESULT += b;
                              :}
                        |
                              /* empty */
                              {: RESULT = ""; :}
;

loop                    ::=   REPEAT WITH EACH VARIABLE:item IN VARIABLE:list 
                              {:
                                 // VARIABLE:list must be a list type
                                 if(!list.isList()) {
                                    parser.temp = list.toString() + " is not a list type.\n";
                                    parser.temp += "Argument 2 of <Repeat with each> statement must be a list type.";
                                    parser.custom_error(parser.temp);
                                 }
                                 
                                 // VARIABLE:item mustn't be a list type
                                 if(item.isList()) {
                                    parser.temp = item.toString() + " is a list type.\n";
                                    parser.temp += "Argument 1 of <Repeat with each> statement must not be a list type.";
                                    parser.custom_error(parser.temp);
                                 }
                                 
                                 // VARIABLE:list must be declared. 
                                 // This is just to try and make sure that the list isn't empty
                                 parser.temp = parser.sm.declareIfNecessary(list);
                                 if(parser.temp.compareTo("") != 0) {
                                    parser.custom_error(list.toString() + " must be declared.");
                                 }
                                 
                                 RESULT = "\n" + parser.sm.indent() + "for (" + item.javaType() + " " + item.name() + " : " + list.name() + ") {\n\n";
                                 parser.sm.increaseLevel();
                                 parser.sm.addToCurrentScope(item);
                              :} NEWLINE
                              optnl
                              block:b
                              optnl
                              DONE NEWLINE
                              {:
                                 parser.sm.decreaseLevel();
                                 RESULT += b;
                                 RESULT += "\n" + parser.sm.indent() + "}\n";
                              :}
                         |
                              REPEAT arithmetic_expression:ae TIMES_REPEAT NEWLINE
                              {:
                                 if((new String(ae.declarations)).compareTo(new String("")) != 0) {
                                 	parser.custom_error(new String("Undeclared variables found in arithemtic expression: " + ae));
                                 }

                                 RESULT = "\n" + parser.sm.indent() + "for(int __temp = 0; __temp < (" + (new String(ae.javaCode)) + ").intValue(); __temp++) {\n\n";
                                 parser.sm.increaseLevel();
                              :}
                              optnl
                              block:b
                              optnl
                              DONE NEWLINE
                              {:
                                 parser.sm.decreaseLevel();
                                 RESULT += b;
                                 RESULT += "\n" + parser.sm.indent() + "}\n";
                              :}
                         |
                              WHILE boolean_expression:be NEWLINE
                              {:
                                 RESULT = "\n" + parser.sm.indent() + "while(" + be.javaCode.toString() + ") {\n\n";
                                 parser.sm.increaseLevel();
                              :}
                              optnl
                              block:b
                              optnl
                              DONE NEWLINE
                              {:
                                 parser.sm.decreaseLevel();
                                 RESULT += b;
                                 RESULT += "\n" + parser.sm.indent() + "}\n";
                              :}
;

function_call           ::=   FUNCTION_NAME:fn arguments_act:args
                              {:
                                 // remove the final ,<space> : (arg1, arg2,<space>)
                                 args = args.trim();
                                 if (args.endsWith(",")) {
                         	       args = args.substring(0, args.length() - 1);
                                 }
                                 
                                 // special handling for in-built math functions
                                 if(fn.compareToIgnoreCase("sin") == 0
                                    ||
                                    fn.compareToIgnoreCase("cos") == 0
                                    ||
                                    fn.compareToIgnoreCase("power") == 0
                                    ||
                                    fn.compareToIgnoreCase("sqrt") == 0
                                    ||
                                    fn.compareToIgnoreCase("tan") == 0) {

                                    fn = "funcset." + fn;
                                 }
                                 RESULT = fn + "(" + args + ")";
                              :}
;

arguments_act           ::=   special_args:sargs arguments_act:args
                              {:
                                 RESULT = sargs + ", " + args;
                              :}
                        |
                              boolean_expression:arg arguments_act:args
                              {:
                                 RESULT = arg.javaCode.toString() + ", " + args;
                              :}
                        |
                              /* empty */
                              {:
                                 RESULT = "";
                              :}
;

special_args            ::=   ADD      {: RESULT = "\"add\"";     :}
                        |     REMOVE   {: RESULT = "\"remove\"";  :}
                        |     ITEM_AT  {: RESULT = "\"item_at\""; :}
                        |     CHANGE   {: RESULT = "\"change\"";  :}
;

local_declaration       ::=   /*variable_name_local:vnl*/ VARIABLE:v NEWLINE 
                              {:
                                 //RESULT = vnl /* + dcl*/;
                                 RESULT = parser.sm.initializeIfNecessary(v);
                                 if(RESULT.equals("")) {
                                    RESULT = v.name();
                                 }
                              :}
                        /*|
                              variable_name_local:vnl assign_op value:val NEWLINE
                              {:
                                 RESULT = "\t\t" + vnl + " = " + val + ";\n";
                              :}
                        |
                              field_access:fa assign_op value:val NEWLINE
                              {:
                                 RESULT = "\t\t" + fa + " = " + val + ";\n";
                              :}*/
;

call                    ::=   SAY out_text:ot NEWLINE
                              {:
                                 RESULT = "say(" + ot + ")";
                              :}
                        |
                              sort_function:sf
                              {:
                                 RESULT = sf;
                              :}
                        |
                              function_call:fc
                              {:
                                 RESULT = fc;
                              :}
;

sort_function           ::=   SORT VARIABLE:vlist sort_type:st optional_sort_arg:osa
                              {:
                                 if(!vlist.isList()) {
                                    parser.custom_error("Argument #1 to sort must be a list");
                                 }
                                 
                                 parser.temp = parser.sm.declareIfNecessary(vlist);
                                 if(parser.temp.compareTo("") != 0) {
                                    parser.custom_error("Undeclared list variable: " + vlist.toString());
                                 }
                                 
                                 if(st.compareTo("<") == 0) {
                                    RESULT = "sort_incr(";
                                 } else {
                                    RESULT = "sort_decr(";
                                 }

                                 RESULT += vlist.name() + ", " + osa + ")";
                              :}
;

sort_type               ::=   IS_STRICTLY_LOWER_THAN    {: RESULT = "<"; :}
                        |     IS_STRICTLY_GREATER_THAN  {: RESULT = ">"; :}
;

optional_sort_arg       ::=   VARIABLE:vnolist
                              {:
                                 if(vnolist.isList()) {
                                    parser.custom_error("Argument #3 to sort mustn't be a list");
                                 }
                                 
                                 for (RobotType t : RobotType.values()) {
                                     if (vnolist.toString().endsWith(t.postFix())) {
                                         if(t.postFix() == "!" || t.postFix() == "$" || t.postFix() == "?") {
                                            parser.custom_error("Argument #3 can't be of type !/$/?");
                                         }
                                         break;
                                     }
                                 }

                                 RESULT = "\"" + vnolist.name() + "\"";
                              :}
                        |
                              /* empty */
                              {: RESULT = "\"\""; :}
;

out_text                ::=   VERBATIM_OUT_TXT:txt out_text:ot
                              {:
                                 if(ot.compareTo("") != 0) {
                                   RESULT = "\"" + txt + "\" + " + ot;
                                 } else {
                                   RESULT = "\"" + txt + "\"";
                                 }
                              :}
                        |
                              SAY_EXPR_STA boolean_expression:be SAY_EXPR_END out_text:ot
                              {:
                                 if(ot.compareTo("") != 0) {
                                 	RESULT = be.javaCode.toString() + " + " + ot;
                                 } else {
                                    RESULT = be.javaCode.toString();
                                 }
                              :}
                        |
                              /* empty */
                              {: RESULT = ""; :}
;
